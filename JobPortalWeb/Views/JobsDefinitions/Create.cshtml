@model JobPortalWeb.Data.JobsDefinition

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-container">
        <h4>JobsDefinition</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-field-container">
            @Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "generic-control" } })
                @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "generic-control" } })
                @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.JobDescription, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.EditorFor(model => model.JobDescription, new { htmlAttributes = new { @class = "generic-control" } })
                @Html.ValidationMessageFor(model => model.JobDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.StartPublishDate, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.EditorFor(model => model.StartPublishDate, new { htmlAttributes = new { @class = "generic-control" } })
                @Html.ValidationMessageFor(model => model.StartPublishDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.EndPublishDate, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.EditorFor(model => model.EndPublishDate, new { htmlAttributes = new { @class = "generic-control" } })
                @Html.ValidationMessageFor(model => model.EndPublishDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.MinDegreeId, "MinDegreeId", htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.DropDownList("MinDegreeId", null, htmlAttributes: new { @class = "generic-control" })
                @Html.ValidationMessageFor(model => model.MinDegreeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.Major, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.EditorFor(model => model.Major, new { htmlAttributes = new { @class = "generic-control" } })
                @Html.ValidationMessageFor(model => model.Major, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.MinYearsOfExperance, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.EditorFor(model => model.MinYearsOfExperance, new { htmlAttributes = new { @class = "generic-control" } })
                @Html.ValidationMessageFor(model => model.MinYearsOfExperance, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.JobRequirement, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                @Html.EditorFor(model => model.JobRequirement, new { htmlAttributes = new { @class = "generic-control" } })
                @Html.ValidationMessageFor(model => model.JobRequirement, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-field-container">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label" })
            <div class="control-container">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-field-container">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
